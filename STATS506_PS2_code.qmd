---
title: "STATS506_PS2_code"
format:
  pdf
---

My Github repository: https://github.com/hzhaoar/Stats_506_PS2

## Problem 1

### Task (a)

Before we start, we need to define a random number generator to control the randomization in all 4 versions of `play_dice` function.

```{r}
#' Function to create a random number generator function
#'
#' @param seed a numeric value
#' @return a function that receives n as input 
#' and generates a n-dimensional random vector using the seed
myRng <- function(seed) {
  set.seed(seed)
  return(function(n) {
    sample(1:6, n, replace = TRUE)
  })
}
```

Then, we try to implement 4 versions of `play_dice`function.

```{r}
#' Version 1: Implement this game using a loop over the die rolls.
#' 
#' @param num_rolls an integer indicating the number of rolls
#' @param rng a function as a random number generator
#' @return total net revenue of the dice-rolls
play_dice_v1 <- function(num_rolls, rng) {
  
  # Generate the rolls using given RNG
  rolls <- rng(num_rolls)
  
  # Iterate over `num_rolls` to calculate total revenue
  revenue <- 0
  for (i in 1:num_rolls) {
    if (rolls[i] %in% c(2, 4, 6)) {
      revenue <- revenue + rolls[i]
    } 
  }
  
  # Calculate net income using net_income = revenue - cost
  cost <- 2*num_rolls
  return(revenue-cost)
}
```

```{r}
#' Version 2: Implement this game using built-in R vectorized functions.
#' 
#' @param num_rolls an integer indicating the number of rolls
#' @param rng a function as a random number generator
#' @return total net revenue of the dice-rolls
play_dice_v2 <- function(num_rolls, rng) {
  
  # Generate the rolls using given RNG
  rolls <- rng(num_rolls)

  # Calculate revenue using R vectorized function
  revenue <- sum(2*(rolls == 2)+ 4*(rolls == 4) + 6*(rolls == 6))
  
  # Calculate net income using net_income = revenue - cost
  cost <- 2*num_rolls
  return(revenue-cost)
}
```

```{r}
#' Version 3: Implement this by collapsing the die rolls into a single table().
#' 
#' @param num_rolls an integer indicating the number of rolls
#' @param rng a function as a random number generator
#' @return total net revenue of the dice-rolls
play_dice_v3 <- function(num_rolls, rng) {
  
  # Generate the rolls using given RNG
  rolls <- rng(num_rolls)
  
  # Collapse the die rolls into a single table
  roll_counts <- table(rolls)

  # Iterate over items in the table
  # Notice that the length of the table can be 6 at most. 
  # So this is not computationally costly.
  revenue <- 0
  for (i in names(roll_counts)){
    if (as.numeric(i) == 2){
      revenue <- revenue + 2*roll_counts[as.character(i)]
      next
    }
    if (as.numeric(i) == 4){
      revenue <- revenue + 4*roll_counts[as.character(i)]
      next
    }
    if (as.numeric(i) == 6){
      revenue <- revenue + 6*roll_counts[as.character(i)]
    }
  }
  revenue <- as.numeric(revenue)
  
  # Calculate net income using net_income = revenue - cost
  cost <- 2*num_rolls
  return(revenue-cost)
}
```

```{r}
#' Version 4: Implement this game by using one of the “apply” functions.
#' 
#' @param num_rolls an integer indicating the number of rolls
#' @param rng a function as a random number generator
#' @return total net revenue of the dice-rolls
play_dice_v4 <- function(num_rolls, rng) {
  
  # Generate the rolls using given RNG
  rolls <- rng(num_rolls)
  
  # Use "apply" to calculate the revenue
  # To use "apply", we choose to convert vector "rolls" into a matrix
  revenue <- sum(apply(matrix(rolls, ncol = num_rolls), 2, function(row) {
    if (row %in% c(2,4,6)){
      return(row)
    } else{
      return(0)
    }
  }))
  
  # Calculate net income using net_income = revenue - cost
  cost <- 2*num_rolls  
  return(revenue-cost)
}
```

### Task (b)

In this task, we will show that all versions work. Notice that we will pass a random number into the function `myRng`, since we do not need to fix the result at this moment.

```{r}
for (t in c(3,3000)) {
  cat("Result for ", t, " using v1 is ", 
      play_dice_v1(t, myRng(sample.int(1000, 1))), "\n")
  cat("Result for ", t, " using v2 is ", 
      play_dice_v2(t, myRng(sample.int(1000, 1))), "\n")
  cat("Result for ", t, " using v3 is ", 
      play_dice_v3(t, myRng(sample.int(1000, 1))), "\n")
  cat("Result for ", t, " using v4 is ", 
      play_dice_v4(t, myRng(sample.int(1000, 1))), "\n")
}
```

### Task (c)

In this task, we will show that the four versions give the same result. We will control the randomization by putting the same seed to RNG.

```{r}
seed <- 114
for (t in c(3,3000)) {
  cat("Result for ", t, " using v1 is ", play_dice_v1(t, myRng(seed)), "\n")
  cat("Result for ", t, " using v2 is ", play_dice_v2(t, myRng(seed)), "\n")
  cat("Result for ", t, " using v3 is ", play_dice_v3(t, myRng(seed)), "\n")
  cat("Result for ", t, " using v4 is ", play_dice_v4(t, myRng(seed)), "\n")
}
```

It is clear that the four versions give the same result.

### Task (d)

First, we need to import `microbenchmark` library.

```{r}
#| code-fold: true
library(microbenchmark)
```

Then, we test the performance with a low input.

```{r}
# Benchmark with low input (100)
seed <- 896
benchmark_low <- microbenchmark(
  v1 = play_dice_v1(100, myRng(seed)),
  v2 = play_dice_v2(100, myRng(seed)),
  v3 = play_dice_v3(100, myRng(seed)),
  v4 = play_dice_v4(100, myRng(seed)),
  times = 100
)
print(benchmark_low)
```

And we test the performance with a large input.

```{r}
# Benchmark with large input (10000)
benchmark_large <- microbenchmark(
  v1 = play_dice_v1(10000, myRng(seed)),
  v2 = play_dice_v2(10000, myRng(seed)),
  v3 = play_dice_v3(10000, myRng(seed)),
  v4 = play_dice_v4(10000, myRng(seed)),
  times = 100
)
print(benchmark_large)
```

Notice that the scale of time using each version differs largely. So, we may take log-transformation of time to make the plot.

```{r}
log_time_low <- benchmark_low
log_time_low$time <- log(benchmark_low$time)
plot(log_time_low, xlab = "version", ylab = "log of time", main = "Benchmark_low")
```

By the boxplot, we can see that for low input, the running time for v1 and v3 are close to each other. And v2 is the fastest one while v4 is the lowest one on average.

```{r}
log_time_large <- benchmark_large
log_time_large$time <- log(benchmark_large$time)
plot(log_time_large, xlab = "version", ylab = "time", main = "Benchmark_large")
```

By the boxplot, we can see that for large input, running time for 4 versions can be ranked as $v2 < v3<v1<v4$ on average.

### Task (e)

For convenience, we will only use `play_dice_v2` in this problem, since the results of 4 versions of function are the same. In a single call of `play_dice_v2` function, we will roll the dice `num_rolls` of times. And we will record the average net income per roll among `num_rolls` times of dice rolls.

In the following Monte Carlo simulation, we will choose 3 different values for `num_rolls`, which are $3,30,300$. And we will repeat this experiment for 100 times.

```{r}
reps <- 100

# Create 3 empty vectors to record the result
n3 <- vector(length = reps)
n30 <- vector(length = reps)
n300 <- vector(length = reps)

# Monte Carlo simulation
for (i in seq_len(reps)) {
  n3[i] <- play_dice_v2(3,myRng(sample.int(1000, 1)))/3
  n30[i] <- play_dice_v2(30,myRng(sample.int(1000, 1)))/30
  n300[i] <- play_dice_v2(300,myRng(sample.int(1000, 1)))/300
}

```

Here, we can plot our result on using boxplot.

```{r}
boxplot(data.frame(n3, n30, n300))
```

We can see for $n_{30}$ and $n_{300}$, the average net income per roll is very close to 0. This is not surprising because theoretically,

$$
\mathbb{E}(net\:income)=\mathbb{E}(revenue)-\mathbb{E}(cost)=\frac{1}{6}(0+2+0+4+0+6)-2=0
$$

Therefore, we can conclude that this game is a fair game.

## Problem 2

First, we read the data.

```{r}
data <- read.csv("./cars.csv")
data <- data.frame(data)
```

### Task (a)

Rename the columns of the data to more reasonable lengths.

```{r}
colnames(data) <- c("height", "length", "width", "driveLine", "engineType", 
                    "isHybrid", "numGears", "transmission", "cityMPG", 
                    "fuelType", "highwayMPG", "classification", "ID", 
                    "make", "modelYear", "IDYear", "horsepower", "torque")
```

### Task (b)

Restrict the data to cars whose Fuel Type is "Gasoline"

```{r}
data <- data[which(data$fuelType == "Gasoline"),]
```

### Task (c)

We will fit a linear regression model predicting MPG on the highway in this task. In the formula of this linear model, we should treat "highwayMPG" as the response variable, horsepower as the predictor, and "torque", "height", "length", "width", and factorized "IDYear" as the control variable.

```{r}
# Fit the linear model
# "factor" treats "IDYear" as a categorical variable, 
# where "2009" is chosen to be the base class by default
data$IDYear <- as.factor(data$IDYear)
M1 <- lm(highwayMPG~IDYear+horsepower+torque+height+length+width, data = data)
summary(M1)
```

By the summary of this linear model, we can find that the p-values for "horsepower", "torque", and "height" are significant, which means these three variables are significant in our model.

And noticing that the estimate for the coefficient of "horsepower" is positive, which implies that as horsepower increases, highway MPG tends to increase. To be more precise, a 1-unit increase in the horsepower tend to cause 0.0163556 units of increase in highway MPG for a car, if other variables remain the same.

Lastly, the multiple R-squared is only $0.4192$, which means our model should be incomplete and we should include more variables in this model.

### Task (d)

In this task, we will first obtain the model with intersection. Noticing that by `horsepower * torque`, R will automatically include `horsepower` and `torque` in the model, then we do not need to include them manually.

```{r}
M2 <- lm(highwayMPG~IDYear+horsepower*torque+height+length+width, data = data)
summary(M2)
```

Before we draw the interaction plot, we can take a look at the distribution of `torque`.

```{r}
hist(data$torque)
```

We can see that most of the observations are in the interval $[100,500]$. So, we may choose 3 different values $(200,300,400)$ in this interval.

And we will use package "interactions" for the interaction plot. And for the value of "IDYear", since it is categorical and it is meaningless to define its mean, we will just pick $IDYear = 2012$.

```{r}
library(interactions)
```

```{r}
interact_plot(M2, pred = horsepower, modx = torque, modx.values = c(200, 300, 400), 
              at = list(IDYear = as.factor(2012)))
```

### Task (e)

In this task, we are to fit a model

$$
highwayMPG = \hat{\beta_0}+\hat{\beta_1}x_1+\hat{\beta_2}x_2+\hat{\beta_3}x_3+\hat{\beta_4}x_4+\hat{\beta_5}x_5+\hat{\beta_6}x_1x_2+\hat{\beta_7}\mathbb{I}_{2010}+\hat{\beta_8}\mathbb{I}_{2011}+\hat{\beta_9}\mathbb{I}_{2012}
$$

Here, $x_1,x_2,x_3,x_4,x_5$ are horsepower, torque, height, length, and width, respectively. And $\mathbb{I}_{2010} =1$ if this observation have $IDYear = 2010$, and $\mathbb{I}_{2010} =0$ otherwise.

Then, we need to construct a vector for response and a matrix for predictors.

```{r}
# Construct the data matrix
y <- data$highwayMPG
X <- data.frame(horsepower = data$horsepower, torque = data$torque, 
                height = data$height, length = data$length , width = data$width)
X$intersection <- data$horsepower*data$torque

# Set the categorical variable
X$ID2010 <- 0
X$ID2011 <- 0
X$ID2012 <- 0
X$ID2010[which(data$IDYear == 2010)] <- 1
X$ID2011[which(data$IDYear == 2011)] <- 1
X$ID2012[which(data$IDYear == 2012)] <- 1

# Set a column for the intercept
X$intercept <- 1
```

After constructing data matrix, we can apply the formula

$$
\hat{\beta}=(X^TX)^{-1}X^Ty
$$

```{r}
# Get prepared for matrix manipulation
X <- as.matrix(X)
y <- as.matrix(y)

# Use the formula
solve(t(X)%*%X)%*%t(X)%*%y
```

We can see our result is identical to the result we obtained form `lm()` numerically.

## Problem 3

### Task (a)

First, we read the data.

```{r, eval=FALSE}
clear
import delimited "C:\Users\hzhaoar\Downloads\cars.csv"
```

And we rename each column

```{r, eval=FALSE}
rename dimensionsheight height
rename dimensionslength length
rename dimensionswidth width
rename engineinformationdriveline driveLine
rename engineinformationenginetype engineType
rename engineinformationhybrid isHybrid
rename engineinformationnumberofforward numGears
rename engineinformationtransmission transmission
rename fuelinformationcitympg cityMPG
rename fuelinformationfueltype fuelType
rename fuelinformationhighwaympg highwayMPG
rename identificationclassification classification
rename identificationid ID
rename identificationmake make
rename identificationmodelyear modelYear
rename identificationyear IDyear
rename engineinformationenginestatistic horsepower
rename v18 torque
```

### Task (b)

Restrict the data to cars whose Fuel Type is "Gasoline"

```{r, eval=FALSE}
keep if fuelType == "Gasoline"
```

### Task (c)

Fit a linear regression model predicting MPG on the highway.

```{r, eval=FALSE}
regress highwayMPG horsepower torque height length width i.IDyear
```

Here is the result.

```{r, eval=FALSE}

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
  highwayMPG | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
      IDyear |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

We can see it is identical to the result we have obtained using R.

### Task (d)

Refit the model by adding the interaction between horsepower and torque.

```{r, eval=FALSE}
regress highwayMPG c.horsepower##c.torque height length width i.IDyear
```

Here is the result.

```{r, eval=FALSE}

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

-------------------------------------------------------------------------------
   highwayMPG | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
--------------+----------------------------------------------------------------
   horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
       torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
              |
 c.horsepower#|
     c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
              |
       height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
       length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
        width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
              |
       IDyear |
        2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
        2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
        2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
              |
        _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
-------------------------------------------------------------------------------
```

We can see this is also identical to the result we have obtained using R.

Then, we can use `margins` and `marginsplot` to create the interaction plot.

```{r, eval=FALSE}
margins, at(torque=(200,300,400) horsepower=(200,300,400,500,600) IDyear=2012)
marginsplot, xdim(horsepower)
```

Here is the interaction plot. 

![Interaction plot](./interaction_plot.png){width=100%}

We can see the three lines we obtained using stata is the same as that we obtained using R. 